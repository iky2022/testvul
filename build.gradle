/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1.1/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'org.springframework.boot' version '2.5.14'
    id 'java'        
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'com.palantir.git-version' version '0.12.3' // to get git-hash in manifest
}

// == Manifest Standardized ==
ext.sharedManifest = manifest {
    attributes(
    'Built-By'       : System.properties['user.name'],
    'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
    'Created-By'     : "Gradle ${gradle.gradleVersion}",
    'Git-Hash'       : versionDetails().gitHash?:'init', 
    "Implementation-Version": findProperty('buildNo') ? theVersion : 'Unknown',
    'Build-JDK'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
    'Build-OS'       : "${System.properties['os.name']} (${System.properties['os.arch']} ${System.properties['os.version']})"
    )
}

if (findProperty('theEarName')?.trim()) {
    apply plugin: 'war'
    if (project.plugins.findPlugin('org.springframework.boot')) {
        bootWar.manifest { from sharedManifest }
        bootWar.launchScript()
    } else {
        war.manifest { from sharedManifest }
    }
} else {
    if (project.plugins.findPlugin('org.springframework.boot')) {
        bootJar.manifest { from sharedManifest }
        // bootJar.launchScript()
    } else {
        jar.manifest { from sharedManifest }
    }
}

// ==
repositories {
	maven {
		url "${theArtifactoryURI}"
		metadataSources {
			mavenPom()
			artifact()
		}
	}
	mavenCentral()
}


/**
 * theName, theGroup & theVersion etc. are defined globally in gradle.properties file. 
 * DO NOT modify them in build.gradle!
 */
sourceCompatibility = theSourceCompatibility
targetCompatibility = theSourceCompatibility
group = theGroup
version = theVersion

compileJava {
    // suppress compiler warnings
    options.compilerArgs << "-Xlint:-deprecation" << "-Xlint:-options"
}

dependencyManagement {
    resolutionStrategy { // for sprint boot projects to load latest snapshots
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springframework.security:spring-security-oauth2-client:5.5.8"
    implementation "org.springframework.security.oauth:spring-security-oauth2:2.5.2.RELEASE"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    implementation 'org.postgresql:postgresql:42.3.6'
    implementation 'com.vladmihalcea:hibernate-types-52:2.8.0'
    implementation 'org.hibernate:hibernate-core:5.6.1.Final'
    //implementation 'org.apache.logging.log4j:log4j-api:2.13.2'
    //implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.13.2'

    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.17.1'

    implementation 'org.yaml:snakeyaml:1.26'

    implementation 'org.json:json:20180130'
    implementation group: "com.networknt", name: "json-schema-validator", version: "1.0.40";

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.apache.poi:poi-ooxml-schemas:4.1.2'
    implementation 'org.apache.xmlbeans:xmlbeans:3.1.0'
    implementation 'org.apache.pdfbox:xmpbox:2.0.26'
    implementation 'org.apache.pdfbox:pdfbox:2.0.31'

    implementation 'net.minidev:json-smart:2.4.7'

    implementation 'org.apache.tomcat.embed:tomcat-embed-core:9.0.65'
    implementation 'org.apache.tomcat.embed:tomcat-embed-el:9.0.65'
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:9.0.65'
    implementation 'org.apache.tomcat:tomcat-annotations-api:10.1.30'

    implementation 'org.apache.commons:commons-compress:1.21'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.6.1'

    // https://mvnrepository.com/artifact/com.nimbusds/lang-tag
    implementation 'com.nimbusds:lang-tag:1.5'

    // https://mvnrepository.com/artifact/org.glassfish/jakarta.el
    implementation 'org.glassfish:jakarta.el:4.0.1'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    useJUnitPlatform()
}

bootRun {
    systemProperty 'management.info.git.mode', 'FULL'
    println 'layered: ' + project.hasProperty('layered')
    if (project.hasProperty('layered')) {
        bootJar.layered()
    }
    else {
        bootJar.launchScript()
    }
}
